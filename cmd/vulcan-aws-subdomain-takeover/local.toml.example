[Check]
Target = "arn:aws:iam::123456789012:root"
AssetType = "AWSAccount"
Options = '{"global": true}'

[RequiredVars]
VULCAN_ASSUME_ROLE_ENDPOINT="http://localhost:8080/assume"
ROLE_NAME="SecurityAuditRole"
CLOUD_INVENTORY_SCRIPT="""
package inventory

import (
	"strings"
	"context"
	"fmt"
)

var ips = " 1.2.3.4 "

func Check(ctx context.Context, ip string) (bool, error) { 
	if ip == "" {
		return false, fmt.Errorf("no ip provided")
	}
	return strings.Contains(ips, " " + ip + " "), nil
}
"""
CLOUD_INVENTORY_FUNCTION=inventory.Check

CLOUD_INVENTORY_SCRIPT_OTHER="""
package inventory

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
)

func Check(ctx context.Context, ip string) (bool, error) {
	path := fmt.Sprintf(os.Getenv("CLOUD_INVENTORY_ENDPOINT"), ip)
	req, err := http.NewRequestWithContext(context.Background(), http.MethodGet, path, nil)
	if err != nil {
		return false, err
	}
	client := http.Client{}
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("xc-token", os.Getenv("CLOUD_INVENTORY_TOKEN"))
	res, err := client.Do(req)
	if err != nil {
		return false, err
	}
	defer res.Body.Close()
	resBody, err := io.ReadAll(res.Body)
	if err != nil {
		return false, err
	}
	if res.StatusCode >= http.StatusOK && res.StatusCode < http.StatusMultipleChoices {
		if string(resBody) == "{}" {
			return false, nil
		}
		return true, nil
	} else if res.StatusCode == http.StatusNotFound {
		return false, fmt.Errorf("status not found")
	}
	return false, fmt.Errorf("unexpected status code: %d", res.StatusCode)
}
"""
